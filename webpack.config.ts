import path from 'path'; // Подключаем модуль path для работы с путями файловimport HtmlWebpackPlugin from "html-webpack-plugin"; // Подключаем плагин HtmlWebpackPlugin для генерации HTML файловimport webpack from 'webpack'; // Подключаем основной модуль webpackimport type { Configuration as DevServerConfiguration } from 'webpack-dev-server'; // Подключаем тип Configuration из webpack-dev-server// Определяем интерфейс конфигурации, который расширяет базовую конфигурацию webpack и добавляет devServerinterface Configuration extends webpack.Configuration {    devServer?: DevServerConfiguration}// Определяем тип Mode, который может быть 'development' или 'production'type Mode = 'development' | 'production';// Определяем интерфейс для переменных окружения, принимаемых в качестве параметровinterface EnvVariables {    mode: Mode, // Режим сборки ('development' или 'production')    port?: number // Порт для devServer (опциональный параметр)}// Экспортируем функцию, которая принимает переменные окружения и возвращает конфигурацию webpackexport default (env: EnvVariables) => {    const isDev = env.mode === 'development'; // Определяем, является ли текущий режим разработкой    // Создаем объект конфигурации webpack    const config: webpack.Configuration = {        mode: env.mode ?? 'development', // Устанавливаем режим сборки (по умолчанию 'development')        entry: path.resolve(__dirname, 'src', 'index.ts'), // Устанавливаем точку входа для сборки        output: {            filename: 'main.js', // Указываем имя выходного файла            path: path.resolve(__dirname, 'dist'), // Указываем путь каталога для собранных файлов            clean: true, // Очищаем каталог сборки перед каждой сборкой        },        plugins: [            // Добавляем плагин HtmlWebpackPlugin для генерации HTML файла            new HtmlWebpackPlugin({                template: path.resolve(__dirname, 'public', 'index.html'), // Указываем путь к шаблону HTML файла            }),        ],        module: {            rules: [                // Определяем правило для загрузки TypeScript файлов с использованием ts-loader                {                    test: /\.tsx?$/, // Регулярное выражение для сопоставления файлов                    use: 'ts-loader', // Используем ts-loader для обработки файлов                    exclude: /node_modules/, // Исключаем папку node_modules из обработки                },            ],        },        resolve: {            extensions: ['.tsx', '.ts', '.js'], // Указываем расширения файлов, которые webpack будет автоматически разрешать        },        devtool: isDev && 'inline-source-map', // Устанавливаем источник карты только в режиме разработки        devServer: isDev ? { // Если режим разработки, то настраиваем devServer            port: env.port ?? 3000, // Устанавливаем порт devServer (по умолчанию 3000)            open: true, // Автоматически открываем браузер при запуске devServer        } : undefined, // Если не режим разработки, то devServer не настраивается    };    return config; // Возвращаем конфигурацию webpack};